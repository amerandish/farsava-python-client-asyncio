# coding: utf-8

"""
    Farsava API

    Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.  # noqa: E501

    OpenAPI spec version: 1.0.5
    Contact: amir@amerandish.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SpeechRecognitionResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transcript': 'str',
        'confidence': 'float',
        'words': 'list[WordInfo]'
    }

    attribute_map = {
        'transcript': 'transcript',
        'confidence': 'confidence',
        'words': 'words'
    }

    def __init__(self, transcript=None, confidence=None, words=None):  # noqa: E501
        """SpeechRecognitionResult - a model defined in OpenAPI"""  # noqa: E501

        self._transcript = None
        self._confidence = None
        self._words = None
        self.discriminator = None

        if transcript is not None:
            self.transcript = transcript
        if confidence is not None:
            self.confidence = confidence
        if words is not None:
            self.words = words

    @property
    def transcript(self):
        """Gets the transcript of this SpeechRecognitionResult.  # noqa: E501

        A UTF8-Encoded string. Transcript text representing the words that the user spoke.   # noqa: E501

        :return: The transcript of this SpeechRecognitionResult.  # noqa: E501
        :rtype: str
        """
        return self._transcript

    @transcript.setter
    def transcript(self, transcript):
        """Sets the transcript of this SpeechRecognitionResult.

        A UTF8-Encoded string. Transcript text representing the words that the user spoke.   # noqa: E501

        :param transcript: The transcript of this SpeechRecognitionResult.  # noqa: E501
        :type: str
        """

        self._transcript = transcript

    @property
    def confidence(self):
        """Gets the confidence of this SpeechRecognitionResult.  # noqa: E501

        The confidence of ASR engine for generated output. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. It is the total confidence of recognition in transcript level and each word confidence in word info object. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating confidence was not set.   # noqa: E501

        :return: The confidence of this SpeechRecognitionResult.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this SpeechRecognitionResult.

        The confidence of ASR engine for generated output. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. It is the total confidence of recognition in transcript level and each word confidence in word info object. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating confidence was not set.   # noqa: E501

        :param confidence: The confidence of this SpeechRecognitionResult.  # noqa: E501
        :type: float
        """
        if confidence is not None and confidence > 1:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")  # noqa: E501
        if confidence is not None and confidence < 0:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")  # noqa: E501

        self._confidence = confidence

    @property
    def words(self):
        """Gets the words of this SpeechRecognitionResult.  # noqa: E501


        :return: The words of this SpeechRecognitionResult.  # noqa: E501
        :rtype: list[WordInfo]
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this SpeechRecognitionResult.


        :param words: The words of this SpeechRecognitionResult.  # noqa: E501
        :type: list[WordInfo]
        """

        self._words = words

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpeechRecognitionResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
