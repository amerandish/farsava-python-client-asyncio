# coding: utf-8

"""
    Farsava API

    Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.  # noqa: E501

    OpenAPI spec version: 1.0.5
    Contact: amir@amerandish.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class VoiceSelectionParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'voice_id': 'str',
        'language_code': 'LanguageCode',
        'name': 'str',
        'gender': 'TTSVoiceGender'
    }

    attribute_map = {
        'voice_id': 'voiceId',
        'language_code': 'languageCode',
        'name': 'name',
        'gender': 'gender'
    }

    def __init__(self, voice_id=None, language_code=None, name=None, gender=None):  # noqa: E501
        """VoiceSelectionParams - a model defined in OpenAPI"""  # noqa: E501

        self._voice_id = None
        self._language_code = None
        self._name = None
        self._gender = None
        self.discriminator = None

        self.voice_id = voice_id
        if language_code is not None:
            self.language_code = language_code
        if name is not None:
            self.name = name
        if gender is not None:
            self.gender = gender

    @property
    def voice_id(self):
        """Gets the voice_id of this VoiceSelectionParams.  # noqa: E501

        id of the desired voice to synthesize.   # noqa: E501

        :return: The voice_id of this VoiceSelectionParams.  # noqa: E501
        :rtype: str
        """
        return self._voice_id

    @voice_id.setter
    def voice_id(self, voice_id):
        """Sets the voice_id of this VoiceSelectionParams.

        id of the desired voice to synthesize.   # noqa: E501

        :param voice_id: The voice_id of this VoiceSelectionParams.  # noqa: E501
        :type: str
        """
        if voice_id is None:
            raise ValueError("Invalid value for `voice_id`, must not be `None`")  # noqa: E501

        self._voice_id = voice_id

    @property
    def language_code(self):
        """Gets the language_code of this VoiceSelectionParams.  # noqa: E501


        :return: The language_code of this VoiceSelectionParams.  # noqa: E501
        :rtype: LanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this VoiceSelectionParams.


        :param language_code: The language_code of this VoiceSelectionParams.  # noqa: E501
        :type: LanguageCode
        """

        self._language_code = language_code

    @property
    def name(self):
        """Gets the name of this VoiceSelectionParams.  # noqa: E501

        Name of the desired voice.  # noqa: E501

        :return: The name of this VoiceSelectionParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VoiceSelectionParams.

        Name of the desired voice.  # noqa: E501

        :param name: The name of this VoiceSelectionParams.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def gender(self):
        """Gets the gender of this VoiceSelectionParams.  # noqa: E501


        :return: The gender of this VoiceSelectionParams.  # noqa: E501
        :rtype: TTSVoiceGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this VoiceSelectionParams.


        :param gender: The gender of this VoiceSelectionParams.  # noqa: E501
        :type: TTSVoiceGender
        """

        self._gender = gender

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VoiceSelectionParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
