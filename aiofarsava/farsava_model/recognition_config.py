# coding: utf-8

"""
    Farsava API

    Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.  # noqa: E501

    OpenAPI spec version: 1.0.5
    Contact: amir@amerandish.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RecognitionConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'audio_encoding': 'AudioEncoding',
        'sample_rate_hertz': 'int',
        'language_code': 'LanguageCode',
        'max_alternatives': 'int',
        'profanity_filter': 'bool',
        'asr_model': 'SpeechRecognitionModel',
        'language_model': 'str'
    }

    attribute_map = {
        'audio_encoding': 'audioEncoding',
        'sample_rate_hertz': 'sampleRateHertz',
        'language_code': 'languageCode',
        'max_alternatives': 'maxAlternatives',
        'profanity_filter': 'profanityFilter',
        'asr_model': 'asrModel',
        'language_model': 'languageModel'
    }

    def __init__(self, audio_encoding=None, sample_rate_hertz=16000, language_code=None, max_alternatives=1, profanity_filter=True, asr_model=None, language_model=None):  # noqa: E501
        """RecognitionConfig - a model defined in OpenAPI"""  # noqa: E501

        self._audio_encoding = None
        self._sample_rate_hertz = None
        self._language_code = None
        self._max_alternatives = None
        self._profanity_filter = None
        self._asr_model = None
        self._language_model = None
        self.discriminator = None

        self.audio_encoding = audio_encoding
        self.sample_rate_hertz = sample_rate_hertz
        self.language_code = language_code
        if max_alternatives is not None:
            self.max_alternatives = max_alternatives
        if profanity_filter is not None:
            self.profanity_filter = profanity_filter
        if asr_model is not None:
            self.asr_model = asr_model
        if language_model is not None:
            self.language_model = language_model

    @property
    def audio_encoding(self):
        """Gets the audio_encoding of this RecognitionConfig.  # noqa: E501


        :return: The audio_encoding of this RecognitionConfig.  # noqa: E501
        :rtype: AudioEncoding
        """
        return self._audio_encoding

    @audio_encoding.setter
    def audio_encoding(self, audio_encoding):
        """Sets the audio_encoding of this RecognitionConfig.


        :param audio_encoding: The audio_encoding of this RecognitionConfig.  # noqa: E501
        :type: AudioEncoding
        """
        if audio_encoding is None:
            raise ValueError("Invalid value for `audio_encoding`, must not be `None`")  # noqa: E501

        self._audio_encoding = audio_encoding

    @property
    def sample_rate_hertz(self):
        """Gets the sample_rate_hertz of this RecognitionConfig.  # noqa: E501

        Sample rate in Hertz of the audio data sent in all RecognitionAudio messages. Valid values are 8000-48000. 16000 is optimal. For best results, set the sampling rate of the audio source to 16000 Hz. If that is not possible, use the native sample rate of the audio source (instead of re-sampling). This field is required for all audio formats. In Text to Speech endpoint is the synthesis sample rate (in hertz) for audio and Optional. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen.   # noqa: E501

        :return: The sample_rate_hertz of this RecognitionConfig.  # noqa: E501
        :rtype: int
        """
        return self._sample_rate_hertz

    @sample_rate_hertz.setter
    def sample_rate_hertz(self, sample_rate_hertz):
        """Sets the sample_rate_hertz of this RecognitionConfig.

        Sample rate in Hertz of the audio data sent in all RecognitionAudio messages. Valid values are 8000-48000. 16000 is optimal. For best results, set the sampling rate of the audio source to 16000 Hz. If that is not possible, use the native sample rate of the audio source (instead of re-sampling). This field is required for all audio formats. In Text to Speech endpoint is the synthesis sample rate (in hertz) for audio and Optional. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen.   # noqa: E501

        :param sample_rate_hertz: The sample_rate_hertz of this RecognitionConfig.  # noqa: E501
        :type: int
        """
        if sample_rate_hertz is None:
            raise ValueError("Invalid value for `sample_rate_hertz`, must not be `None`")  # noqa: E501

        self._sample_rate_hertz = sample_rate_hertz

    @property
    def language_code(self):
        """Gets the language_code of this RecognitionConfig.  # noqa: E501


        :return: The language_code of this RecognitionConfig.  # noqa: E501
        :rtype: LanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this RecognitionConfig.


        :param language_code: The language_code of this RecognitionConfig.  # noqa: E501
        :type: LanguageCode
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")  # noqa: E501

        self._language_code = language_code

    @property
    def max_alternatives(self):
        """Gets the max_alternatives of this RecognitionConfig.  # noqa: E501

        Optional Maximum number of recognition hypotheses to be returned. Specifically, the maximum number of SpeechRecognitionAlternative messages within each SpeechRecognitionResult. The server may return fewer than maxAlternatives. Valid values are 1-5. A value of 0 or 1 will return a maximum of one. If omitted, will return a maximum of one.  # noqa: E501

        :return: The max_alternatives of this RecognitionConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_alternatives

    @max_alternatives.setter
    def max_alternatives(self, max_alternatives):
        """Sets the max_alternatives of this RecognitionConfig.

        Optional Maximum number of recognition hypotheses to be returned. Specifically, the maximum number of SpeechRecognitionAlternative messages within each SpeechRecognitionResult. The server may return fewer than maxAlternatives. Valid values are 1-5. A value of 0 or 1 will return a maximum of one. If omitted, will return a maximum of one.  # noqa: E501

        :param max_alternatives: The max_alternatives of this RecognitionConfig.  # noqa: E501
        :type: int
        """
        if max_alternatives is not None and max_alternatives > 5:  # noqa: E501
            raise ValueError("Invalid value for `max_alternatives`, must be a value less than or equal to `5`")  # noqa: E501
        if max_alternatives is not None and max_alternatives < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_alternatives`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_alternatives = max_alternatives

    @property
    def profanity_filter(self):
        """Gets the profanity_filter of this RecognitionConfig.  # noqa: E501

        Optional If set to true, the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks, e.g. \"s***\". If set to false or omitted, profanities will not be filtered out.  # noqa: E501

        :return: The profanity_filter of this RecognitionConfig.  # noqa: E501
        :rtype: bool
        """
        return self._profanity_filter

    @profanity_filter.setter
    def profanity_filter(self, profanity_filter):
        """Sets the profanity_filter of this RecognitionConfig.

        Optional If set to true, the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks, e.g. \"s***\". If set to false or omitted, profanities will not be filtered out.  # noqa: E501

        :param profanity_filter: The profanity_filter of this RecognitionConfig.  # noqa: E501
        :type: bool
        """

        self._profanity_filter = profanity_filter

    @property
    def asr_model(self):
        """Gets the asr_model of this RecognitionConfig.  # noqa: E501


        :return: The asr_model of this RecognitionConfig.  # noqa: E501
        :rtype: SpeechRecognitionModel
        """
        return self._asr_model

    @asr_model.setter
    def asr_model(self, asr_model):
        """Sets the asr_model of this RecognitionConfig.


        :param asr_model: The asr_model of this RecognitionConfig.  # noqa: E501
        :type: SpeechRecognitionModel
        """

        self._asr_model = asr_model

    @property
    def language_model(self):
        """Gets the language_model of this RecognitionConfig.  # noqa: E501

        This is the language model id of a customized trained language model. You can train your own language models and then use them to recognize speech. Refer to [languagemodel/train](#languagemodel/train) for more info.    There are some pretrained language models which you can use.    Model | Description   ------------ | -------------   general | Best for audio content that is not one of the specific language models. This is the default language model and if you are not sure which one to use, simply use 'general'.   numbers | Best for audio content that contains only spoken numbers. For examble this language model can be used for speech enabled number input fileds.   yesno | Best for audio content that contains yes or no. For examble this language model can be used to receive confirmation from user.   country | Best for audio content that contains only spoken country. For examble this language model can be used for speech enabled input fileds.   city | Best for audio content that contains only spoken city. For examble this language model      can be used for speech enabled input fileds.   career | Best for audio content that contains only spoken career names. For examble this language model can be used for speech enabled input fileds.   # noqa: E501

        :return: The language_model of this RecognitionConfig.  # noqa: E501
        :rtype: str
        """
        return self._language_model

    @language_model.setter
    def language_model(self, language_model):
        """Sets the language_model of this RecognitionConfig.

        This is the language model id of a customized trained language model. You can train your own language models and then use them to recognize speech. Refer to [languagemodel/train](#languagemodel/train) for more info.    There are some pretrained language models which you can use.    Model | Description   ------------ | -------------   general | Best for audio content that is not one of the specific language models. This is the default language model and if you are not sure which one to use, simply use 'general'.   numbers | Best for audio content that contains only spoken numbers. For examble this language model can be used for speech enabled number input fileds.   yesno | Best for audio content that contains yes or no. For examble this language model can be used to receive confirmation from user.   country | Best for audio content that contains only spoken country. For examble this language model can be used for speech enabled input fileds.   city | Best for audio content that contains only spoken city. For examble this language model      can be used for speech enabled input fileds.   career | Best for audio content that contains only spoken career names. For examble this language model can be used for speech enabled input fileds.   # noqa: E501

        :param language_model: The language_model of this RecognitionConfig.  # noqa: E501
        :type: str
        """

        self._language_model = language_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecognitionConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
