# coding: utf-8

"""
    Farsava API

    Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.  # noqa: E501

    OpenAPI spec version: 1.0.5
    Contact: amir@amerandish.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HealthCheckResponseBody(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'message': 'str',
        'version': 'str'
    }

    attribute_map = {
        'status': 'status',
        'message': 'message',
        'version': 'version'
    }

    def __init__(self, status=None, message=None, version=None):  # noqa: E501
        """HealthCheckResponseBody - a model defined in OpenAPI"""  # noqa: E501

        self._status = None
        self._message = None
        self._version = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if message is not None:
            self.message = message
        if version is not None:
            self.version = version

    @property
    def status(self):
        """Gets the status of this HealthCheckResponseBody.  # noqa: E501


        :return: The status of this HealthCheckResponseBody.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HealthCheckResponseBody.


        :param status: The status of this HealthCheckResponseBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["Running", "Warnings", "Critical"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def message(self):
        """Gets the message of this HealthCheckResponseBody.  # noqa: E501

        Health check message. Returns *OK* if running without problem.  # noqa: E501

        :return: The message of this HealthCheckResponseBody.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this HealthCheckResponseBody.

        Health check message. Returns *OK* if running without problem.  # noqa: E501

        :param message: The message of this HealthCheckResponseBody.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def version(self):
        """Gets the version of this HealthCheckResponseBody.  # noqa: E501

        API version.  # noqa: E501

        :return: The version of this HealthCheckResponseBody.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HealthCheckResponseBody.

        API version.  # noqa: E501

        :param version: The version of this HealthCheckResponseBody.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthCheckResponseBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
